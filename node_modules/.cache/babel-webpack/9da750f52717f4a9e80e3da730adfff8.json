{"ast":null,"code":"import _asyncToGenerator from \"/home/dorine/4-epsi/OPEN-INNOVATION/app-securiface/front-app-securiface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudUserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this._users = new BehaviorSubject(null);\n    this.users$ = this._users.asObservable();\n  } // Create\n\n\n  createUser(user) {\n    let API_URL = `${this.apiUrl}/users/create`;\n    return this.http.post(API_URL, user).pipe(catchError(this.error));\n  } // Read\n\n\n  showUsers() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('je suis dans showUsers');\n      yield _this.http.get(`${_this.apiUrl}/users/`).pipe(first()).toPromise().then(response => {\n        // on assign la reponse à la Behavior Subject\n        _this._users.next(response.data);\n      }).catch(err => console.log(err));\n    })();\n  } // Update\n\n\n  updateUser(user) {\n    let API_URL = `${this.apiUrl}/users/${user.id}`;\n    return this.http.put(API_URL, user, {\n      headers: this.headers\n    }).pipe(catchError(this.error));\n  } // Delete\n\n\n  deleteUser(user) {\n    var API_URL = `${this.apiUrl}/users/delete/${user.id}`;\n    return this.http.delete(API_URL).pipe(catchError(this.error));\n  } // Handle Errors\n\n\n  error(error) {\n    let errorMessage = '';\n\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n\nCrudUserService.ɵfac = function CrudUserService_Factory(t) {\n  return new (t || CrudUserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCrudUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudUserService,\n  factory: CrudUserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dorine/4-epsi/OPEN-INNOVATION/app-securiface/front-app-securiface/src/app/services/crud-user.service.ts"],"names":[],"mappings":";AACA,SAAqB,UAArB,EAAiC,eAAjC,QAAwD,MAAxD;AACA,SAAS,UAAT,QAA2B,gBAA3B;AACA,SAAqB,WAArB,QAA2D,sBAA3D;AAEA,SAAS,KAAT,QAAsB,gBAAtB;;;AAKA,OAAM,MAAO,eAAP,CAAsB;AAO1B,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AALZ,SAAA,MAAA,GAAiB,uBAAjB;AACA,SAAA,OAAA,GAAU,IAAI,WAAJ,GAAkB,GAAlB,CAAsB,cAAtB,EAAsC,kBAAtC,CAAV;AACA,SAAA,MAAA,GAA+B,IAAI,eAAJ,CAAoB,IAApB,CAA/B;AACD,SAAA,MAAA,GAA0B,KAAK,MAAL,CAAY,YAAZ,EAA1B;AAEkC,GAPf,CAS1B;;;AACA,EAAA,UAAU,CAAC,IAAD,EAAW;AACnB,QAAI,OAAO,GAAG,GAAG,KAAK,MAAM,eAA5B;AACA,WAAO,KAAK,IAAL,CAAU,IAAV,CAAe,OAAf,EAAwB,IAAxB,EACJ,IADI,CAEH,UAAU,CAAC,KAAK,KAAN,CAFP,CAAP;AAID,GAhByB,CAiB1B;;;AACM,EAAA,SAAS,GAAA;AAAA;;AAAA;AACb,MAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ;AACA,YAAM,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,GAAG,KAAI,CAAC,MAAM,SAA5B,EAAuC,IAAvC,CAA4C,KAAK,EAAjD,EACL,SADK,GAEH,IAFG,CAEG,QAAD,IAAkB;AACtB;AACA,QAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,QAAQ,CAAC,IAA1B;AACD,OALG,EAMH,KANG,CAMG,GAAG,IAAI,OAAO,CAAC,GAAR,CAAY,GAAZ,CANV,CAAN;AAFa;AASd,GA3ByB,CA6B1B;;;AACA,EAAA,UAAU,CAAC,IAAD,EAAW;AACnB,QAAI,OAAO,GAAG,GAAG,KAAK,MAAM,UAAU,IAAI,CAAC,EAAE,EAA7C;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,OAAd,EAAuB,IAAvB,EAA6B;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAA7B,EAAwD,IAAxD,CACL,UAAU,CAAC,KAAK,KAAN,CADL,CAAP;AAGD,GAnCyB,CAoC1B;;;AACA,EAAA,UAAU,CAAC,IAAD,EAAW;AACnB,QAAI,OAAO,GAAG,GAAG,KAAK,MAAM,iBAAiB,IAAI,CAAC,EAAE,EAApD;AACA,WAAO,KAAK,IAAL,CAAU,MAAV,CAAiB,OAAjB,EAA0B,IAA1B,CACL,UAAU,CAAC,KAAK,KAAN,CADL,CAAP;AAGD,GA1CyB,CA2C1B;;;AACA,EAAA,KAAK,CAAC,KAAD,EAAyB;AAC5B,QAAI,YAAY,GAAG,EAAnB;;AACA,QAAI,KAAK,CAAC,KAAN,YAAuB,UAA3B,EAAuC;AACrC,MAAA,YAAY,GAAG,KAAK,CAAC,KAAN,CAAY,OAA3B;AACD,KAFD,MAEO;AACL,MAAA,YAAY,GAAG,eAAe,KAAK,CAAC,MAAM,cAAc,KAAK,CAAC,OAAO,EAArE;AACD;;AACD,IAAA,OAAO,CAAC,GAAR,CAAY,YAAZ;AACA,WAAO,UAAU,CAAC,YAAD,CAAjB;AACD;;AArDyB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EAFd","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { User } from '../interfaces/user';\nimport { first } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudUserService {\n\n  private apiUrl: string = 'http://localhost:8080';\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n  private _users: BehaviorSubject<any> = new BehaviorSubject(null);\n  public users$: Observable<any> = this._users.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  // Create\n  createUser(user: User): Observable<any> {\n    let API_URL = `${this.apiUrl}/users/create`;\n    return this.http.post(API_URL, user)\n      .pipe(\n        catchError(this.error)\n      )\n  }\n  // Read\n  async showUsers() {\n    console.log('je suis dans showUsers')\n    await this.http.get(`${this.apiUrl}/users/`).pipe(first())\n    .toPromise()\n      .then((response: any) => {\n        // on assign la reponse à la Behavior Subject\n        this._users.next(response.data);\n      })\n      .catch(err => console.log(err))\n  }\n\n  // Update\n  updateUser(user: User): Observable<any> {\n    let API_URL = `${this.apiUrl}/users/${user.id}`;\n    return this.http.put(API_URL, user, { headers: this.headers }).pipe(\n      catchError(this.error)\n    )\n  }\n  // Delete\n  deleteUser(user: User): Observable<any> {\n    var API_URL = `${this.apiUrl}/users/delete/${user.id}`;\n    return this.http.delete(API_URL).pipe(\n      catchError(this.error)\n    )\n  }\n  // Handle Errors\n  error(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}